<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/task 
       http://www.springframework.org/schema/task/spring-task-4.1.xsd">


	<!-- 自动扫描 -->
	<context:component-scan base-package="com.third.autoloan">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入外部的数据库配置文件 -->
	<context:property-placeholder location="classpath:mysql.properties"
		ignore-unresolvable="true" />


	<!-- 配置mybatis的dbcp数据源 -->
	<bean id="dataSourceForMybatis" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${mysql.driverClassName}"></property>
		<property name="url" value="${mysql.url}"></property>
		<property name="username" value="${mysql.username}"></property>
		<property name="password" value="${mysql.password}"></property>
	</bean>

	<!-- 配置mybatis的sessionFactory -->
	<bean id="sessionFactoryForMybatis" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceForMybatis"></property>
		<!-- 如果有多个包需要同时取类别名， 包与包之间采用,或;间隔 -->
		<property name="typeAliasesPackage" value="com.third.autoloan.beans">
		</property>
	</bean>

	<bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.third.autoloan"></property>
		<property name="sqlSessionFactoryBeanName" value="sessionFactoryForMybatis"></property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${mysql.driverClassName}"></property>
		<property name="jdbcUrl" value="${mysql.url}"></property>
		<property name="user" value="${mysql.username}"></property>
		<property name="password" value="${mysql.password}"></property>
	</bean>

	<bean class="com.third.autoloan.util.InstantiationTracingBeanPostProcessor" />

	<bean id="sessionFactory" factory-bean="localEntityManagerFactoryBean"
		factory-method="getSessionFactory" />

	<!-- 配置springJPA的SessionFactory -->
	<bean id="localEntityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 配置JPA采用Hibernate底层框架实现 -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
		</property>
		<!-- 扫描ORM映射关系 -->
		<property name="packagesToScan">
			<list>
				<value>com.third.autoloan.beans</value>
			</list>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			</props>
		</property>
	</bean>

	<!-- 配置事务管理器,并且ID必须为：transactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="localEntityManagerFactoryBean"></property>
	</bean>

	<!-- spring声明式事务管理方式，企业应用开发推荐 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" read-only="true" />
			<!-- propagation="REQUIRED" 事务的传播需要事务管理 isolation="REPEATABLE_READ" 事务的隔离级别选择可重复读 
				rollback-for="java.lang.Exception"异常的情况下回滚 read-only="false" 将连接修改为可写 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />

			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="modify*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="change*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />

			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED" isolation="REPEATABLE_READ"
				rollback-for="java.lang.Exception" read-only="false" />

			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut
			expression="execution(* com.third.autoloan.*mag.service.impl.*ServiceImpl.*(..))"
			id="serviceMethod" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
	</aop:config>
	<aop:aspectj-autoproxy />

	<!-- 将JPA接口与SessionFactory进行关联 -->
	<jpa:repositories base-package="com.third.autoloan"
		entity-manager-factory-ref="localEntityManagerFactoryBean">
	</jpa:repositories>


	<!-- 定时器的配置 -->
	<task:annotation-driven />
	<context:annotation-config />

	<bean
		class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />

	<context:component-scan base-package="com.third.autoloan" />

	<!-- <task:annotation-driven scheduler="myScheduler" mode="proxy" /> <task:scheduler 
		id="myScheduler" pool-size="10"/> -->
</beans>       